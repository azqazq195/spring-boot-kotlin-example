#name: Production CI/CD
#
#on:
#  pull_request:
#    types:
#      - closed
#    branches:
#      - main
#
#env:
#  AWS_REGION: ap-northeast-2
#  SERVICE_NAME: okkot
#  TARGET: production
#
#jobs:
#  deploy:
#    if: github.event.pull_request.merged == true
#    name: Deploy
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Install JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          java-package: jdk
#
#      - name: Set Production Profile
#        run: |
#          cd ./src/main/resources
#          touch ./application-production.yml
#          echo "${{ secrets.APPLICATION_PRODUCTION_YML }}" >> ./application-production.yml
#        shell: bash
#
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: build gradle with test
#        run: ./gradlew clean build -x test
#        timeout-minutes: 4
#
#      - name: Archive test report
#        if: ${{ failure() }}
#        uses: actions/upload-artifact@v2
#        with:
#          name: test-results
#          path: build/reports/tests/test
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          PROFILE: ${{ env.TARGET }}
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ env.SERVICE_NAME }}-${{ env.TARGET }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build --build-arg PROFILE=$PROFILE -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Download Task Definition Template
#        env:
#          TASK_DEF_NAME: ${{ env.SERVICE_NAME }}-${{ env.TARGET }}
#        run: |
#          aws ecs describe-task-definition \
#            --task-definition $TASK_DEF_NAME \
#            --query taskDefinition \
#            > task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ env.SERVICE_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        timeout-minutes: 4
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.SERVICE_NAME }}
#          cluster: ${{ env.SERVICE_NAME }}-${{ env.TARGET }}
#          wait-for-service-stability: true
#
#      - name: De-register (latest-10) revision
#        if: ${{ steps.download-task.outputs.revision > 0 }}
#        run: |
#          aws ecs deregister-task-definition \
#            --task-definition  ${{ env.SERVICE_NAME }}:${{ steps.download-task.outputs.revision }}
#
#      - name: Slack Notification
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: workflow,job,commit,repo,author,took,pullRequest
#          #fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest  # selectable (default: repo,message)
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}
#        if: always()